<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有博客 - Joker-desire's Blog</title><link>https://Joker-desire.github.io/posts/</link><description>所有博客 | Joker-desire's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 13 Jun 2024 14:38:31 +0800</lastBuildDate><atom:link href="https://Joker-desire.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Laravel 11.x 入门</title><link>https://Joker-desire.github.io/2024/06/laravel11%E5%85%A5%E9%97%A8/</link><pubDate>Thu, 13 Jun 2024 14:38:31 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2024/06/laravel11%E5%85%A5%E9%97%A8/</guid><description>Laravel 11 Laravel 11 通过引入简化的应用程序结构、每秒速率限制、健康路由、优雅的加密密钥轮换、队列测试改进、重新发送邮件传输、提示验证器集成、新的 Artisan 命令等</description></item><item><title>ChatGPT 提问的艺术</title><link>https://Joker-desire.github.io/2023/10/chatgpt%E6%8F%90%E9%97%AE%E8%89%BA%E6%9C%AF/</link><pubDate>Thu, 26 Oct 2023 17:27:10 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2023/10/chatgpt%E6%8F%90%E9%97%AE%E8%89%BA%E6%9C%AF/</guid><description>一、Prompt工程 什么是Prompt工程？ Prompt 工程是创建 Prompt、提问或指导像 ChatGPT 这样的语言模型输出的过程。 它允许用户控制模型的输出，生成</description></item><item><title>Selenium Grid 模拟操作上传操作问题解决方案</title><link>https://Joker-desire.github.io/2023/10/selenium-grid-%E6%A8%A1%E6%8B%9F%E6%93%8D%E4%BD%9C%E4%B8%8A%E4%BC%A0%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Sun, 22 Oct 2023 09:50:18 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2023/10/selenium-grid-%E6%A8%A1%E6%8B%9F%E6%93%8D%E4%BD%9C%E4%B8%8A%E4%BC%A0%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>在使用Selenium Grid模拟操作上传文件时，会从浏览器实例的本地文件系统中读取文件。这就导致了一个问题，如果Grid Hub所在的机器上</description></item><item><title>Go 泛型（1.18+）</title><link>https://Joker-desire.github.io/2023/05/go-%E6%B3%9B%E5%9E%8B/</link><pubDate>Sat, 27 May 2023 21:05:26 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2023/05/go-%E6%B3%9B%E5%9E%8B/</guid><description>泛型基本含义 在定义函数（结构等）时，可能会有多种类型传入，真正使用方法的时候才可以确定用的是什么类型，此时就可以用一个更加宽泛的类型（存在一</description></item><item><title>Go 反射</title><link>https://Joker-desire.github.io/2023/05/go%E5%8F%8D%E5%B0%84/</link><pubDate>Sat, 27 May 2023 14:02:42 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2023/05/go%E5%8F%8D%E5%B0%84/</guid><description>基本介绍 反射可以在运行时动态获取变量的各种信息，比如变量的类型（type），类别（kind） 如果是结构体变量，还可以获取到结构体本身的信息（</description></item><item><title>Go 序列化</title><link>https://Joker-desire.github.io/2023/05/go%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Thu, 25 May 2023 12:56:13 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2023/05/go%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description><![CDATA[序列化 func Marshal(v any) ([]byte, error) 可传入任意参数进行序列化 【官方文档】 结构体序列化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main import ( &#34;encoding/json&#34; &#34;fmt&#34; ) type User struct { Name string `json:&#34;name&#34;`]]></description></item><item><title>Go 命令行参数</title><link>https://Joker-desire.github.io/2023/05/go%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</link><pubDate>Wed, 24 May 2023 18:27:06 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2023/05/go%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</guid><description><![CDATA[Args解析命令行参数 flag解析命令行参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( &#34;flag&#34; &#34;fmt&#34; &#34;time&#34; ) //fl]]></description></item><item><title>Go文件操作</title><link>https://Joker-desire.github.io/2023/05/go%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link><pubDate>Tue, 23 May 2023 18:51:04 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2023/05/go%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid><description>基本介绍 文件再程序中是以流的形式来操作的。 流：数据再数据源（文件）和程序（内存）之间经历的路径 输入流：数据从数据源（文件）到程序（内存）的路</description></item><item><title>Go面向对象三大特性</title><link>https://Joker-desire.github.io/2023/05/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</link><pubDate>Sun, 21 May 2023 09:22:27 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2023/05/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</guid><description>基本介绍 Golang仍然有面向对象编程的继承、封装和多态的特性，只是实现的方式和其他OOP语言不一样。 封装 封装的介绍 封装（encapsula</description></item><item><title>Go结构体</title><link>https://Joker-desire.github.io/2023/05/go%E7%BB%93%E6%9E%84%E4%BD%93/</link><pubDate>Fri, 19 May 2023 06:53:42 +0800</pubDate><author>Joker-desire</author><guid>https://Joker-desire.github.io/2023/05/go%E7%BB%93%E6%9E%84%E4%BD%93/</guid><description>结构体 声明结构体 基本语法 1 2 3 4 type 结构体名称 struct{ field1 type field2 type } 字段/属性 基本介绍 结构体字段 = 属性 = field 字段是结构体的一个组成部分，一般是基本数据类型</description></item></channel></rss>